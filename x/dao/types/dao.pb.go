// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: onomyprotocol/dao/v1/dao.proto

package types

import (
	fmt "fmt"
	io "io"
	math "math"
	math_bits "math/bits"

	github_com_cosmos_cosmos_sdk_types "github.com/cosmos/cosmos-sdk/types"
	types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = proto.Marshal
	_ = fmt.Errorf
	_ = math.Inf
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// FundTreasuryProposal details a dao fund treasury proposal.
type FundTreasuryProposal struct {
	Sender      string                                   `protobuf:"bytes,1,opt,name=sender,proto3" json:"sender,omitempty"`
	Title       string                                   `protobuf:"bytes,2,opt,name=title,proto3" json:"title,omitempty"`
	Description string                                   `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
	Amount      github_com_cosmos_cosmos_sdk_types.Coins `protobuf:"bytes,4,rep,name=amount,proto3,castrepeated=github.com/cosmos/cosmos-sdk/types.Coins" json:"amount" yaml:"amount"`
}

func (m *FundTreasuryProposal) Reset()      { *m = FundTreasuryProposal{} }
func (*FundTreasuryProposal) ProtoMessage() {}
func (*FundTreasuryProposal) Descriptor() ([]byte, []int) {
	return fileDescriptor_763c2cafbce2acfd, []int{0}
}

func (m *FundTreasuryProposal) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}

func (m *FundTreasuryProposal) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_FundTreasuryProposal.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}

func (m *FundTreasuryProposal) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FundTreasuryProposal.Merge(m, src)
}

func (m *FundTreasuryProposal) XXX_Size() int {
	return m.Size()
}

func (m *FundTreasuryProposal) XXX_DiscardUnknown() {
	xxx_messageInfo_FundTreasuryProposal.DiscardUnknown(m)
}

var xxx_messageInfo_FundTreasuryProposal proto.InternalMessageInfo

// FundTreasuryProposal details a dao exchange with treasury proposal.
type ExchangeWithTreasuryProposal struct {
	Sender      string                                   `protobuf:"bytes,1,opt,name=sender,proto3" json:"sender,omitempty"`
	Title       string                                   `protobuf:"bytes,2,opt,name=title,proto3" json:"title,omitempty"`
	Description string                                   `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
	AmountAsk   github_com_cosmos_cosmos_sdk_types.Coins `protobuf:"bytes,4,rep,name=amountAsk,proto3,castrepeated=github.com/cosmos/cosmos-sdk/types.Coins" json:"amountAsk" yaml:"amount_ask"`
	AmountBid   github_com_cosmos_cosmos_sdk_types.Coins `protobuf:"bytes,5,rep,name=amountBid,proto3,castrepeated=github.com/cosmos/cosmos-sdk/types.Coins" json:"amountBid" yaml:"amount_bid"`
}

func (m *ExchangeWithTreasuryProposal) Reset()      { *m = ExchangeWithTreasuryProposal{} }
func (*ExchangeWithTreasuryProposal) ProtoMessage() {}
func (*ExchangeWithTreasuryProposal) Descriptor() ([]byte, []int) {
	return fileDescriptor_763c2cafbce2acfd, []int{1}
}

func (m *ExchangeWithTreasuryProposal) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}

func (m *ExchangeWithTreasuryProposal) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ExchangeWithTreasuryProposal.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}

func (m *ExchangeWithTreasuryProposal) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ExchangeWithTreasuryProposal.Merge(m, src)
}

func (m *ExchangeWithTreasuryProposal) XXX_Size() int {
	return m.Size()
}

func (m *ExchangeWithTreasuryProposal) XXX_DiscardUnknown() {
	xxx_messageInfo_ExchangeWithTreasuryProposal.DiscardUnknown(m)
}

var xxx_messageInfo_ExchangeWithTreasuryProposal proto.InternalMessageInfo

func init() {
	proto.RegisterType((*FundTreasuryProposal)(nil), "onomyprotocol.dao.v1.FundTreasuryProposal")
	proto.RegisterType((*ExchangeWithTreasuryProposal)(nil), "onomyprotocol.dao.v1.ExchangeWithTreasuryProposal")
}

func init() { proto.RegisterFile("onomyprotocol/dao/v1/dao.proto", fileDescriptor_763c2cafbce2acfd) }

var fileDescriptor_763c2cafbce2acfd = []byte{
	// 397 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xb4, 0x93, 0xb1, 0x8b, 0xd4, 0x40,
	0x18, 0xc5, 0x93, 0x3b, 0x6f, 0xe1, 0xe6, 0xb4, 0x30, 0x04, 0x89, 0x87, 0x4c, 0x96, 0x54, 0x8b,
	0x60, 0x86, 0x68, 0x77, 0xdd, 0x45, 0x4e, 0x2c, 0xe5, 0x10, 0x04, 0x1b, 0x99, 0x64, 0x86, 0xec,
	0xb0, 0xc9, 0x7c, 0x21, 0x33, 0x59, 0x36, 0x8d, 0xb5, 0xa5, 0xa5, 0xe5, 0x96, 0xe2, 0x5f, 0xb2,
	0xe5, 0x96, 0x56, 0xab, 0x64, 0x1b, 0xb1, 0xb4, 0xb6, 0x90, 0x4c, 0x02, 0xbb, 0x5b, 0x89, 0x0b,
	0x56, 0x93, 0xef, 0xbd, 0x24, 0xbf, 0xf7, 0x06, 0x3e, 0x84, 0x41, 0x42, 0xd1, 0x94, 0x15, 0x68,
	0x48, 0x21, 0x27, 0x8c, 0x02, 0x99, 0x47, 0xdd, 0x11, 0x1a, 0xcd, 0x71, 0x0f, 0xfc, 0xb0, 0x33,
	0xe6, 0xd1, 0xa5, 0x9b, 0x41, 0x06, 0x46, 0x24, 0xdd, 0x53, 0xff, 0xee, 0x25, 0x4e, 0x41, 0x15,
	0xa0, 0x48, 0x42, 0x15, 0x27, 0xf3, 0x28, 0xe1, 0x9a, 0x46, 0x24, 0x05, 0x21, 0x7b, 0x3f, 0xf8,
	0x69, 0x23, 0xf7, 0x45, 0x2d, 0xd9, 0xeb, 0x8a, 0x53, 0x55, 0x57, 0xcd, 0xab, 0x0a, 0x4a, 0x50,
	0x34, 0x77, 0x1e, 0xa0, 0x91, 0xe2, 0x92, 0xf1, 0xca, 0xb3, 0xc7, 0xf6, 0xe4, 0xfc, 0x76, 0x98,
	0x1c, 0x17, 0x9d, 0x69, 0xa1, 0x73, 0xee, 0x9d, 0x18, 0xb9, 0x1f, 0x9c, 0x31, 0xba, 0x60, 0x5c,
	0xa5, 0x95, 0x28, 0xb5, 0x00, 0xe9, 0x9d, 0x1a, 0x6f, 0x5f, 0x72, 0x34, 0x1a, 0xd1, 0x02, 0x6a,
	0xa9, 0xbd, 0x3b, 0xe3, 0xd3, 0xc9, 0xc5, 0xd3, 0x87, 0x61, 0x9f, 0x2c, 0xec, 0x92, 0x85, 0x43,
	0xb2, 0xf0, 0x39, 0x08, 0x19, 0x5f, 0xaf, 0x36, 0xbe, 0xf5, 0x6b, 0xe3, 0xdf, 0x6b, 0x68, 0x91,
	0x5f, 0x05, 0xfd, 0x67, 0xc1, 0x97, 0x6f, 0xfe, 0x24, 0x13, 0x7a, 0x5a, 0x27, 0x61, 0x0a, 0x05,
	0x19, 0x7a, 0xf5, 0xc7, 0x13, 0xc5, 0x66, 0x44, 0x37, 0x25, 0x57, 0xe6, 0x0f, 0xea, 0x76, 0x60,
	0x5d, 0xdd, 0xfd, 0xb0, 0xf4, 0xad, 0x4f, 0x4b, 0xdf, 0xfa, 0xb1, 0xf4, 0xad, 0xe0, 0xf7, 0x09,
	0x7a, 0x74, 0xb3, 0x48, 0xa7, 0x54, 0x66, 0xfc, 0x8d, 0xd0, 0xd3, 0xff, 0x5e, 0xfa, 0x3d, 0x3a,
	0xef, 0x83, 0x5c, 0xab, 0xd9, 0xdf, 0x7b, 0xdf, 0x0c, 0xbd, 0xef, 0xef, 0xf7, 0x7e, 0x47, 0xd5,
	0xec, 0xdf, 0xba, 0xef, 0x90, 0x3b, 0x7e, 0x2c, 0x98, 0x77, 0x76, 0x1c, 0x3f, 0x11, 0xec, 0x28,
	0x7e, 0x2c, 0xd8, 0xe1, 0xf5, 0xc7, 0x2f, 0x3f, 0xb7, 0xd8, 0x5e, 0xb5, 0xd8, 0x5e, 0xb7, 0xd8,
	0xfe, 0xde, 0x62, 0xfb, 0xe3, 0x16, 0x5b, 0xeb, 0x2d, 0xb6, 0xbe, 0x6e, 0xb1, 0xf5, 0xf6, 0xf1,
	0x1e, 0xe0, 0x70, 0x01, 0xcc, 0x44, 0x16, 0x66, 0x11, 0x0c, 0x28, 0x19, 0x19, 0xef, 0xd9, 0x9f,
	0x00, 0x00, 0x00, 0xff, 0xff, 0x8e, 0xd4, 0x12, 0x54, 0x2a, 0x03, 0x00, 0x00,
}

func (m *FundTreasuryProposal) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FundTreasuryProposal) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *FundTreasuryProposal) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Amount) > 0 {
		for iNdEx := len(m.Amount) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Amount[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintDao(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x22
		}
	}
	if len(m.Description) > 0 {
		i -= len(m.Description)
		copy(dAtA[i:], m.Description)
		i = encodeVarintDao(dAtA, i, uint64(len(m.Description)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Title) > 0 {
		i -= len(m.Title)
		copy(dAtA[i:], m.Title)
		i = encodeVarintDao(dAtA, i, uint64(len(m.Title)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Sender) > 0 {
		i -= len(m.Sender)
		copy(dAtA[i:], m.Sender)
		i = encodeVarintDao(dAtA, i, uint64(len(m.Sender)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ExchangeWithTreasuryProposal) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ExchangeWithTreasuryProposal) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ExchangeWithTreasuryProposal) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.AmountBid) > 0 {
		for iNdEx := len(m.AmountBid) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.AmountBid[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintDao(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x2a
		}
	}
	if len(m.AmountAsk) > 0 {
		for iNdEx := len(m.AmountAsk) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.AmountAsk[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintDao(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x22
		}
	}
	if len(m.Description) > 0 {
		i -= len(m.Description)
		copy(dAtA[i:], m.Description)
		i = encodeVarintDao(dAtA, i, uint64(len(m.Description)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Title) > 0 {
		i -= len(m.Title)
		copy(dAtA[i:], m.Title)
		i = encodeVarintDao(dAtA, i, uint64(len(m.Title)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Sender) > 0 {
		i -= len(m.Sender)
		copy(dAtA[i:], m.Sender)
		i = encodeVarintDao(dAtA, i, uint64(len(m.Sender)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintDao(dAtA []byte, offset int, v uint64) int {
	offset -= sovDao(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}

func (m *FundTreasuryProposal) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Sender)
	if l > 0 {
		n += 1 + l + sovDao(uint64(l))
	}
	l = len(m.Title)
	if l > 0 {
		n += 1 + l + sovDao(uint64(l))
	}
	l = len(m.Description)
	if l > 0 {
		n += 1 + l + sovDao(uint64(l))
	}
	if len(m.Amount) > 0 {
		for _, e := range m.Amount {
			l = e.Size()
			n += 1 + l + sovDao(uint64(l))
		}
	}
	return n
}

func (m *ExchangeWithTreasuryProposal) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Sender)
	if l > 0 {
		n += 1 + l + sovDao(uint64(l))
	}
	l = len(m.Title)
	if l > 0 {
		n += 1 + l + sovDao(uint64(l))
	}
	l = len(m.Description)
	if l > 0 {
		n += 1 + l + sovDao(uint64(l))
	}
	if len(m.AmountAsk) > 0 {
		for _, e := range m.AmountAsk {
			l = e.Size()
			n += 1 + l + sovDao(uint64(l))
		}
	}
	if len(m.AmountBid) > 0 {
		for _, e := range m.AmountBid {
			l = e.Size()
			n += 1 + l + sovDao(uint64(l))
		}
	}
	return n
}

func sovDao(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}

func sozDao(x uint64) (n int) {
	return sovDao(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}

func (m *FundTreasuryProposal) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDao
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FundTreasuryProposal: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FundTreasuryProposal: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sender", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDao
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDao
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDao
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sender = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Title", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDao
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDao
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDao
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Title = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Description", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDao
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDao
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDao
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Description = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDao
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDao
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthDao
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Amount = append(m.Amount, types.Coin{})
			if err := m.Amount[len(m.Amount)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDao(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthDao
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}

func (m *ExchangeWithTreasuryProposal) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDao
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ExchangeWithTreasuryProposal: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ExchangeWithTreasuryProposal: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sender", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDao
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDao
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDao
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sender = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Title", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDao
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDao
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDao
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Title = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Description", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDao
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDao
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDao
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Description = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AmountAsk", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDao
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDao
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthDao
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AmountAsk = append(m.AmountAsk, types.Coin{})
			if err := m.AmountAsk[len(m.AmountAsk)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AmountBid", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDao
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDao
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthDao
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AmountBid = append(m.AmountBid, types.Coin{})
			if err := m.AmountBid[len(m.AmountBid)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDao(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthDao
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}

func skipDao(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowDao
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowDao
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowDao
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthDao
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupDao
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthDao
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthDao        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowDao          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupDao = fmt.Errorf("proto: unexpected end of group")
)
